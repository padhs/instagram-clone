{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/arosek/Desktop/instagram-clone/instagram/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Post from './Post.js';\nimport { database, auth } from \"./firebase\";\nimport Modal from \"@material-ui/core/Modal\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Button from \"@material-ui/core/Button\";\nimport Input from \"@material-ui/core/Input\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: 'relative',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid #ddd',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  }\n}));\n\nfunction App() {\n  _s();\n\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([]); //this is for the login modal(a small piece of dialog-box which will take username and pass)\n\n  const [open, setOpen] = useState(false);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n  const [username, setUsername] = useState('');\n  const [openSignIn, setOpenSignIn] = useState(false); //user is understood as an object.\n  //By default there is no user (so null) useState is going to change the object type when there is a user logged in (not null).\n\n  const handleSignIn = login => {\n    login.preventDefault(); //removal of this would result the user never being able to log in.\n    //preventDefault does not refresh the page, that it would do by-default when we hit the login button.\n\n    auth.createUserWithEmailAndPassword(email, password).then(authUser => {\n      return authUser.user.updateProfile({\n        displayName: username\n      });\n    }).catch(error => alert(error.message));\n  }; //this will close the login modal\n\n\n  const closeHandler = () => {\n    setOpen(false);\n  }; //this is the modal(dialog-box design)\n\n\n  const body = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-insta-logo\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"signup-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"insta-logo-login\",\n        width: \"174.99\",\n        height: \"50.99\",\n        src: \"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\",\n        alt: \"insta-letter-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        className: \"username-login\",\n        placeholder: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: username => setUsername(username.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        className: \"email-login\",\n        placeholder: \"email\",\n        type: \"text\",\n        value: email,\n        onChange: email => setEmail(email.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        className: \"pass-login\",\n        placeholder: \"password\",\n        type: \"password\",\n        value: password,\n        onChange: pass => setPassword(pass.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"signin-button\",\n        type: \"submit\",\n        children: \"LOG IN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"forgot-pass\",\n        children: \"Forgot Password?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-account\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"signup-instead\",\n          children: \"Dont have an account? Sign Up instead\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"login-button\",\n          type: \"submit\",\n          onClick: handleSignIn,\n          children: \"SIGN UP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this); //this code comes into work anytime when an user gets logged in or out as the state of the user(object) gets changed.\n\n\n  useEffect(() => {\n    const verifyUser = auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        //user has logged in.\n        console.log(authUser); //this is for my convenience. not for the user.\n\n        setUser(authUser); //uses cookie tracking.(so this is persistent)\n        //state is not persistent\n      } else {\n        //user is not logged in. (logged out.)\n        setUser(null);\n      }\n    });\n    return () => {\n      //check if the user is spamming. (creating too many login sessions too quick)\n      verifyUser(); //detach the listener so that we don't have too many listeners created.(in case someone is out of their minds.)\n      //if the user didn't do that earlier, it will then fire the useEffect\n    };\n  }, [user, username]);\n  useEffect(() => {\n    database.collection('posts').onSnapshot(snapshot => {\n      setPosts(snapshot.docs.map(doc => ({\n        id: doc.id,\n        posts: doc.data()\n      })));\n    });\n  }, []); //not dependent on posts now. cause we are mapping document id with each post.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: closeHandler,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.paper,\n        style: modalStyle,\n        children: body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: openSignIn,\n      onClose: () => setOpenSignIn(false),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.paper,\n        style: modalStyle,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-insta-logo\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"signup-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"insta-logo-login\",\n              width: \"174.99\",\n              height: \"50.99\",\n              src: \"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\",\n              alt: \"insta-letter-logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              className: \"email-login\",\n              placeholder: \"email\",\n              type: \"text\",\n              value: email,\n              onChange: email => setEmail(email.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              className: \"pass-login\",\n              placeholder: \"password\",\n              type: \"password\",\n              value: password,\n              onChange: pass => setPassword(pass.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"signin-button\",\n              type: \"submit\",\n              children: \"sign in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"forgot-pass\",\n              children: \"Forgot Password?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no-account\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"signup-instead\",\n                children: \"Dont have an account? Sign Up instead\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"login-button\",\n                type: \"submit\",\n                onClick: handleSignIn,\n                children: \"SIGN UP\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"nav-bar-image\",\n        src: \"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\",\n        alt: \"insta-letter-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this), user ? /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => auth.signOut(),\n      children: \"LOG OUT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 14\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-login-container\",\n      children: [\"(\", /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setOpen(true),\n        children: \"SIGN UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 18\n      }, this), \") (\", /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setOpenSignIn(true),\n        children: \"SIGN IN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 18\n      }, this), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"login-button-before-posts\",\n      onClick: () => setOpen(true),\n      children: \"LOG IN\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      classname: \"signup-button-before-posts\",\n      onClick: () => setOpen(true),\n      children: \"SIGN UP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this), posts.map(({\n      id,\n      posts\n    }) => /*#__PURE__*/_jsxDEV(Post, {\n      //mapping document id so that react doesn't re-render a post that is already showing.\n      userName: posts.userName,\n      captions: posts.captions,\n      imageUrl: posts.imageUrl,\n      postAvatar: posts.postAvatar\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Lx45ZujYg73MZCTLpg4SYeIYt9g=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/arosek/Desktop/instagram-clone/instagram/src/App.js"],"names":["React","useState","useEffect","Post","database","auth","Modal","makeStyles","Button","Input","getModalStyle","top","left","transform","useStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","open","setOpen","email","setEmail","password","setPassword","user","setUser","username","setUsername","openSignIn","setOpenSignIn","handleSignIn","login","preventDefault","createUserWithEmailAndPassword","then","authUser","updateProfile","displayName","catch","error","alert","message","closeHandler","body","target","value","pass","verifyUser","onAuthStateChanged","console","log","collection","onSnapshot","snapshot","docs","map","doc","id","data","signOut","userName","captions","imageUrl","postAvatar"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Post from './Post.js'\nimport { database, auth } from \"./firebase\";\nimport Modal from \"@material-ui/core/Modal\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Button from \"@material-ui/core/Button\";\nimport Input from \"@material-ui/core/Input\";\n\n\nfunction getModalStyle() {\n    const top = 50;\n    const left = 50;\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'relative',\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '1px solid #ddd',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nfunction App() {\n\n    const classes = useStyles();\n    const [modalStyle] = useState(getModalStyle);\n    const [posts, setPosts] =useState([]);\n    //this is for the login modal(a small piece of dialog-box which will take username and pass)\n    const [open, setOpen] = useState (false);\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [user, setUser] = useState(null);\n    const [username, setUsername] = useState('')\n    const [openSignIn, setOpenSignIn] = useState(false);\n    //user is understood as an object.\n    //By default there is no user (so null) useState is going to change the object type when there is a user logged in (not null).\n\n    const handleSignIn = (login) => {\n        login.preventDefault();\n        //removal of this would result the user never being able to log in.\n        //preventDefault does not refresh the page, that it would do by-default when we hit the login button.\n        auth.createUserWithEmailAndPassword(email, password)\n            .then((authUser => {\n                return authUser.user.updateProfile({\n                    displayName: username\n                })\n            }))\n            .catch((error) => alert(error.message));\n    }\n    //this will close the login modal\n    const closeHandler = () => {\n        setOpen(false);\n    };\n\n\n    //this is the modal(dialog-box design)\n    const body = (\n        <div className=\"modal-insta-logo\">\n            <form className=\"signup-form\">\n                <img\n                    className=\"insta-logo-login\"\n                    width=\"174.99\"\n                    height=\"50.99\"\n                    src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                    alt=\"insta-letter-logo\"/>\n\n                <Input\n                    className=\"username-login\"\n                    placeholder=\"username\"\n                    type=\"text\"\n                    value={username}\n                    onChange={(username) => setUsername(username.target.value)}/>\n                <Input\n                    className=\"email-login\"\n                    placeholder=\"email\"\n                    type=\"text\"\n                    value={email}\n                    onChange={(email) => setEmail(email.target.value)} />\n\n                <Input\n                    className=\"pass-login\"\n                    placeholder=\"password\"\n                    type=\"password\"\n                    value={password}\n                    onChange={(pass) => setPassword(pass.target.value)} />\n\n                <Button\n                    className=\"signin-button\"\n                    type=\"submit\">\n                    LOG IN\n                </Button>\n                <p className=\"forgot-pass\">Forgot Password?</p>\n                <div className=\"no-account\">\n                    <p className=\"signup-instead\">Dont have an account? Sign Up instead</p>\n\n                    <Button\n                        className=\"login-button\"\n                        type=\"submit\"\n                        onClick={handleSignIn}>\n                        SIGN UP\n                    </Button>\n\n                </div>\n            </form>\n        </div>\n    );\n\n    //this code comes into work anytime when an user gets logged in or out as the state of the user(object) gets changed.\n    useEffect(() => {\n        const verifyUser = auth.onAuthStateChanged((authUser) => {\n         if (authUser) {\n             //user has logged in.\n             console.log(authUser);//this is for my convenience. not for the user.\n             setUser(authUser);//uses cookie tracking.(so this is persistent)\n             //state is not persistent\n         } else {\n             //user is not logged in. (logged out.)\n             setUser(null)\n         }\n\n        })\n        return () => {\n            //check if the user is spamming. (creating too many login sessions too quick)\n            verifyUser();\n            //detach the listener so that we don't have too many listeners created.(in case someone is out of their minds.)\n            //if the user didn't do that earlier, it will then fire the useEffect\n        }\n    }, [user, username]);\n\n    useEffect(() => {\n        database.collection('posts').onSnapshot(snapshot => {\n            setPosts(snapshot.docs.map(doc => ({id: doc.id, posts: doc.data()})));\n        })},\n        []);\n    //not dependent on posts now. cause we are mapping document id with each post.\n\n\n\n  return (\n    <div className = \"app\">\n        <Modal\n            open={open}\n            onClose={closeHandler}>\n            <div\n                className={classes.paper}\n                 style={modalStyle}>\n                 {body}\n            </div>\n        </Modal>\n\n        <Modal\n            open={openSignIn}\n            onClose={() => setOpenSignIn(false)}>\n            <div\n                className={classes.paper}\n                style={modalStyle}>\n                <div className=\"modal-insta-logo\">\n                    <form className=\"signup-form\">\n                        <img\n                            className=\"insta-logo-login\"\n                            width=\"174.99\"\n                            height=\"50.99\"\n                            src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                            alt=\"insta-letter-logo\"/>\n\n                        <Input\n                            className=\"email-login\"\n                            placeholder=\"email\"\n                            type=\"text\"\n                            value={email}\n                            onChange={(email) => setEmail(email.target.value)} />\n\n                        <Input\n                            className=\"pass-login\"\n                            placeholder=\"password\"\n                            type=\"password\"\n                            value={password}\n                            onChange={(pass) => setPassword(pass.target.value)} />\n\n                        <Button\n                            className=\"signin-button\"\n                            type=\"submit\">\n                            sign in\n                        </Button>\n                        <p className=\"forgot-pass\">Forgot Password?</p>\n                        <div className=\"no-account\">\n                            <p className=\"signup-instead\">Dont have an account? Sign Up instead</p>\n\n                            <Button\n                                className=\"login-button\"\n                                type=\"submit\"\n                                onClick={handleSignIn}>\n                                SIGN UP\n                            </Button>\n\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </Modal>\n\n        <div className= \"nav-bar\">\n          <img className=\"nav-bar-image\"\n               src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n               alt=\"insta-letter-logo\"\n          />\n      </div>\n        {user ?\n            (<Button onClick={() => auth.signOut()}>LOG OUT</Button>):\n            <div className=\"app-login-container\">\n                (<Button onClick={() => setOpen(true)}>SIGN UP</Button>)\n                (<Button onClick={() => setOpenSignIn(true)}>SIGN IN</Button>)\n            </div>\n        }\n\n        <Button\n            className=\"login-button-before-posts\"\n            onClick={() => setOpen(true)}>\n            LOG IN\n        </Button>\n        <Button\n            classname=\"signup-button-before-posts\"\n            onClick={() => setOpen(true)}>\n            SIGN UP\n        </Button>\n\n\n        {\n            posts.map(({id, posts}) => (\n                <Post\n\n                    key={id}\n                    //mapping document id so that react doesn't re-render a post that is already showing.\n                    userName={posts.userName}\n                    captions={posts.captions}\n                    imageUrl={posts.imageUrl}\n                    postAvatar={posts.postAvatar}/>\n            ))\n        }\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}