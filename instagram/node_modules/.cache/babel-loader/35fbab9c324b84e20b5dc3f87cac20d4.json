{"ast":null,"code":"var _jsxFileName = \"/home/arosek/instagram-clone/instagram/src/EmojiPicker.js\";\nimport React from \"react\";\nimport { postMessage } from \"../adapter/api\";\nimport validate from \"./validations\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EmojiPicker extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      text: \"\",\n      conversation_id: this.props.conversation_id,\n      user_id: this.props.user_id,\n      showEmojis: false,\n      errors: []\n    };\n\n    this.showEmojis = e => {\n      this.setState({\n        showEmojis: true\n      }, () => document.addEventListener(\"click\", this.closeMenu));\n    };\n\n    this.closeMenu = e => {\n      console.log(this.emojiPicker);\n\n      if (this.emojiPicker !== null && !this.emojiPicker.contains(e.target)) {\n        this.setState({\n          showEmojis: false\n        }, () => document.removeEventListener(\"click\", this.closeMenu));\n      }\n    };\n\n    this.componentWillReceiveProps = nextProps => {\n      this.setState({\n        conversation_id: nextProps.conversation_id,\n        user_id: nextProps.user_id\n      });\n    };\n\n    this.handleChange = e => {\n      let validation = validate(e.target.value); //console.log(validation)\n\n      this.setState({\n        text: e.target.value,\n        errors: validation\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      let validation = validate(this.state.text); //console.log(validation)\n\n      if (validation.length === 0) {\n        postMessage(this.state);\n        this.setState({\n          text: \"\"\n        });\n      }\n\n      this.setState({\n        errors: validation\n      });\n    };\n\n    this.addEmoji = e => {\n      // console.log(e.native);\n      let emoji = e.native;\n      this.setState({\n        text: this.state.text + emoji\n      });\n    };\n  }\n\n  render() {\n    let errors = this.state.errors.map(err => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: err\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 51\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.container,\n      className: \"newMessageForm\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        style: styles.form,\n        onSubmit: this.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          style: styles.input,\n          type: \"text\",\n          value: this.state.text,\n          onChange: this.handleChange,\n          placeholder: \"Type a message and hit ENTER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"red\"\n        },\n        children: errors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), this.state.showEmojis ? /*#__PURE__*/_jsxDEV(\"span\", {\n        style: styles.emojiPicker,\n        ref: el => this.emojiPicker = el,\n        children: /*#__PURE__*/_jsxDEV(Picker, {\n          onSelect: this.addEmoji,\n          emojiTooltip: true,\n          title: \"weChat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        style: styles.getEmojiButton,\n        onClick: this.showEmojis,\n        children: String.fromCodePoint(0x1f60a)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default EmojiPicker;","map":{"version":3,"sources":["/home/arosek/instagram-clone/instagram/src/EmojiPicker.js"],"names":["React","postMessage","validate","Picker","EmojiPicker","Component","state","text","conversation_id","props","user_id","showEmojis","errors","e","setState","document","addEventListener","closeMenu","console","log","emojiPicker","contains","target","removeEventListener","componentWillReceiveProps","nextProps","handleChange","validation","value","handleSubmit","preventDefault","length","addEmoji","emoji","native","render","map","err","styles","container","form","input","color","el","getEmojiButton","String","fromCodePoint"],"mappings":"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","sourcesContent":["\nimport React from \"react\";\nimport { postMessage } from \"../adapter/api\";\nimport validate from \"./validations\";\n\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\n\nclass EmojiPicker extends React.Component {\n    state = {\n        text: \"\",\n        conversation_id: this.props.conversation_id,\n        user_id: this.props.user_id,\n        showEmojis: false,\n        errors: []\n    };\n\n    showEmojis = e => {\n        this.setState(\n            {\n                showEmojis: true\n            },\n            () => document.addEventListener(\"click\", this.closeMenu)\n        );\n    };\n\n    closeMenu = e => {\n        console.log(this.emojiPicker);\n        if (this.emojiPicker !== null && !this.emojiPicker.contains(e.target)) {\n            this.setState(\n                {\n                    showEmojis: false\n                },\n                () => document.removeEventListener(\"click\", this.closeMenu)\n            );\n        }\n    };\n\n    componentWillReceiveProps = nextProps => {\n        this.setState({\n            conversation_id: nextProps.conversation_id,\n            user_id: nextProps.user_id\n        });\n    };\n\n    handleChange = e => {\n        let validation = validate(e.target.value);\n        //console.log(validation)\n        this.setState({\n            text: e.target.value,\n            errors: validation\n        });\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        let validation = validate(this.state.text);\n        //console.log(validation)\n        if (validation.length === 0) {\n            postMessage(this.state);\n            this.setState({ text: \"\" });\n        }\n        this.setState({\n            errors: validation\n        });\n    };\n\n    addEmoji = e => {\n        // console.log(e.native);\n        let emoji = e.native;\n        this.setState({\n            text: this.state.text + emoji\n        });\n    };\n\n    render() {\n        let errors = this.state.errors.map(err => <p>{err}</p>);\n\n        return (\n            <div style={styles.container} className=\"newMessageForm\">\n                <form style={styles.form} onSubmit={this.handleSubmit}>\n                    <input\n                        style={styles.input}\n                        type=\"text\"\n                        value={this.state.text}\n                        onChange={this.handleChange}\n                        placeholder=\"Type a message and hit ENTER\"\n                    />\n                </form>\n                <div style={{ color: \"red\" }}>{errors}</div>\n                {this.state.showEmojis ? (\n                    <span style={styles.emojiPicker} ref={el => (this.emojiPicker = el)}>\n            <Picker\n                onSelect={this.addEmoji}\n                emojiTooltip={true}\n                title=\"weChat\"\n            />\n          </span>\n                ) : (\n                    <p style={styles.getEmojiButton} onClick={this.showEmojis}>\n                        {String.fromCodePoint(0x1f60a)}\n                    </p>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default EmojiPicker\n"]},"metadata":{},"sourceType":"module"}